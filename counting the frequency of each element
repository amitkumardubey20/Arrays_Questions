// using loops 
// less efficient 
// time complexity - O(n^2)
// space complexity - O(n)
  =============  method -1 ==================
  
public class Main{
    public static void main(String args[]){
        int arr[]={1,1,2,3,2,5};
    
        int n=arr.length;
        findFrequency(arr,n);
        
    }
    static void findFrequency(int arr[],int n){
        boolean visited[]=new boolean[n];
        for(int i=0;i<n;i++)
        {
        if(visited[i]==true)
            continue;
        
            int count=1;
            for(int j=i+1;j<n;j++){
                if(arr[i]==arr[j]){
                    visited[j]=true;
                    count++;
                }
            }
            
            System.out.println(arr[i]+" : "+count);
        }
    }
}

// ========= method-2 ====================
time complexity- O(n)
space complexity-O(n)
// using maps
// efficient approach

import java.util.*;
public class Main{
    public static void main(String args[]){
        int arr[]={1,1,2,2,3,4};
      
       HashMap <Integer ,Integer>hm=new HashMap<>(); 
       
        for(int i=0;i<arr.length;i++){
            
           if(hm.containsKey(arr[i])){
               hm.put(arr[i], hm.get(arr[i])+1);
           }
           
           else{
               hm.put(arr[i],1);
           }
           
        }
        for(Map.Entry<Integer,Integer> entry:  hm.entrySet()){
            System.out.println(entry.getKey()+" "+entry.getValue());
        }
    }
}
