// method -1 brute force method
// time complexity-O(nlogn)+O(n)
//space complexity-O(n)

import java.util.*;
public class Main{
    public static void main(String args[]){
        int arr[]={1,1,2,3,3};
        int k=findDuplicates(arr);
        for(int i=0;i<k;i++){
            System.out.println(arr[i]);
        }
        
    }
    static int findDuplicates(int arr[]){
        HashSet <Integer> set =new HashSet<>();
        
        for(int i=0;i<arr.length;i++){
            set.add(arr[i]);
        }
        int k=set.size();
        int j=0;
        for(int x:set){
            arr[j++]=x;
        }
        return k;
        
    }
}
// method-2
// most efficient approacch --- by using 2 pointers i and j
// time complexity-O(n)
// space complexity-O(1)
// removing of duplicate elements in a sorted array

import java.util.*;
public class Main{
    public static void main(String args[]){
        int arr[]={1,2,3,1,2,3};
        int k=findDuplicate(arr);
        for(int i=0;i<k;i++){
          System.out.println(arr[i]);  
        }
        
    }
    static int findDuplicate(int arr[]){
        int i=0;
        
        for(int j=i+1;j<arr.length;j++){
            if(arr[i]!=arr[j]){
                i++;
                arr[i]=arr[j];
            }
        }
        return i+1;
    }
}
